# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import options_order_flow_pb2 as options__order__flow__pb2

GRPC_GENERATED_VERSION = '1.73.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in options_order_flow_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class OptionsOrderFlowServiceStub(object):
    """Options Order Flow Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetOptionsOrderFlowSnapshot = channel.unary_unary(
                '/orderflow.OptionsOrderFlowService/GetOptionsOrderFlowSnapshot',
                request_serializer=options__order__flow__pb2.GetOptionsOrderFlowSnapshotRequest.SerializeToString,
                response_deserializer=options__order__flow__pb2.OptionsOrderFlowSnapshotResponse.FromString,
                _registered_method=True)
        self.GetOptionsOrderFlowPatterns = channel.unary_unary(
                '/orderflow.OptionsOrderFlowService/GetOptionsOrderFlowPatterns',
                request_serializer=options__order__flow__pb2.GetOptionsOrderFlowPatternsRequest.SerializeToString,
                response_deserializer=options__order__flow__pb2.OptionsOrderFlowPatternsResponse.FromString,
                _registered_method=True)
        self.ConfigureOptionsOrderFlowMonitoring = channel.unary_unary(
                '/orderflow.OptionsOrderFlowService/ConfigureOptionsOrderFlowMonitoring',
                request_serializer=options__order__flow__pb2.ConfigureOptionsOrderFlowRequest.SerializeToString,
                response_deserializer=options__order__flow__pb2.ConfigureOptionsOrderFlowResponse.FromString,
                _registered_method=True)
        self.GetOptionsOrderFlowMonitoringStatus = channel.unary_unary(
                '/orderflow.OptionsOrderFlowService/GetOptionsOrderFlowMonitoringStatus',
                request_serializer=options__order__flow__pb2.GetOptionsOrderFlowStatusRequest.SerializeToString,
                response_deserializer=options__order__flow__pb2.OptionsOrderFlowStatusResponse.FromString,
                _registered_method=True)
        self.GetOptionsOrderFlowAggregations = channel.unary_unary(
                '/orderflow.OptionsOrderFlowService/GetOptionsOrderFlowAggregations',
                request_serializer=options__order__flow__pb2.GetOptionsOrderFlowAggregationsRequest.SerializeToString,
                response_deserializer=options__order__flow__pb2.OptionsOrderFlowAggregationsResponse.FromString,
                _registered_method=True)


class OptionsOrderFlowServiceServicer(object):
    """Options Order Flow Service
    """

    def GetOptionsOrderFlowSnapshot(self, request, context):
        """Get comprehensive options order flow snapshot
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOptionsOrderFlowPatterns(self, request, context):
        """Get options patterns for specific contracts
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureOptionsOrderFlowMonitoring(self, request, context):
        """Configure options monitoring dynamically
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOptionsOrderFlowMonitoringStatus(self, request, context):
        """Get current monitoring status
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOptionsOrderFlowAggregations(self, request, context):
        """Get options aggregations for specific timeframes
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OptionsOrderFlowServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetOptionsOrderFlowSnapshot': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOptionsOrderFlowSnapshot,
                    request_deserializer=options__order__flow__pb2.GetOptionsOrderFlowSnapshotRequest.FromString,
                    response_serializer=options__order__flow__pb2.OptionsOrderFlowSnapshotResponse.SerializeToString,
            ),
            'GetOptionsOrderFlowPatterns': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOptionsOrderFlowPatterns,
                    request_deserializer=options__order__flow__pb2.GetOptionsOrderFlowPatternsRequest.FromString,
                    response_serializer=options__order__flow__pb2.OptionsOrderFlowPatternsResponse.SerializeToString,
            ),
            'ConfigureOptionsOrderFlowMonitoring': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureOptionsOrderFlowMonitoring,
                    request_deserializer=options__order__flow__pb2.ConfigureOptionsOrderFlowRequest.FromString,
                    response_serializer=options__order__flow__pb2.ConfigureOptionsOrderFlowResponse.SerializeToString,
            ),
            'GetOptionsOrderFlowMonitoringStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOptionsOrderFlowMonitoringStatus,
                    request_deserializer=options__order__flow__pb2.GetOptionsOrderFlowStatusRequest.FromString,
                    response_serializer=options__order__flow__pb2.OptionsOrderFlowStatusResponse.SerializeToString,
            ),
            'GetOptionsOrderFlowAggregations': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOptionsOrderFlowAggregations,
                    request_deserializer=options__order__flow__pb2.GetOptionsOrderFlowAggregationsRequest.FromString,
                    response_serializer=options__order__flow__pb2.OptionsOrderFlowAggregationsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'orderflow.OptionsOrderFlowService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('orderflow.OptionsOrderFlowService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class OptionsOrderFlowService(object):
    """Options Order Flow Service
    """

    @staticmethod
    def GetOptionsOrderFlowSnapshot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/orderflow.OptionsOrderFlowService/GetOptionsOrderFlowSnapshot',
            options__order__flow__pb2.GetOptionsOrderFlowSnapshotRequest.SerializeToString,
            options__order__flow__pb2.OptionsOrderFlowSnapshotResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetOptionsOrderFlowPatterns(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/orderflow.OptionsOrderFlowService/GetOptionsOrderFlowPatterns',
            options__order__flow__pb2.GetOptionsOrderFlowPatternsRequest.SerializeToString,
            options__order__flow__pb2.OptionsOrderFlowPatternsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ConfigureOptionsOrderFlowMonitoring(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/orderflow.OptionsOrderFlowService/ConfigureOptionsOrderFlowMonitoring',
            options__order__flow__pb2.ConfigureOptionsOrderFlowRequest.SerializeToString,
            options__order__flow__pb2.ConfigureOptionsOrderFlowResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetOptionsOrderFlowMonitoringStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/orderflow.OptionsOrderFlowService/GetOptionsOrderFlowMonitoringStatus',
            options__order__flow__pb2.GetOptionsOrderFlowStatusRequest.SerializeToString,
            options__order__flow__pb2.OptionsOrderFlowStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetOptionsOrderFlowAggregations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/orderflow.OptionsOrderFlowService/GetOptionsOrderFlowAggregations',
            options__order__flow__pb2.GetOptionsOrderFlowAggregationsRequest.SerializeToString,
            options__order__flow__pb2.OptionsOrderFlowAggregationsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
